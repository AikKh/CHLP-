program        ::= statements END_OF_FILE

statements        ::= statement { ";" statement }

statement      ::= (assignment | expr | function) 
assignment     ::= id "=" expr

// Expressions

bool_expr      ::= bool_term { "or" bool_term }
bool_term      ::= bool_factor { "and" bool_factor }
bool_factor    ::= "not" bool_factor | "(" bool_expr ")" | equals

equals         ::= comparison { ("==" | "!=") comparison }
comparison     ::= expr { ("<" | ">" | "<=" | ">=") expr }

expr           ::= term { ("+" | "-") term }
term           ::= factor { ("*" | "/") factor }
factor         ::= ["-"] (number | id | "(" expr ")") | function_call

// Vars and litterals
 
number         ::= digit { digit }
id             ::= letter { letter | digit }

digit          ::= "0".."9"
letter         ::= "a".."z" | "A".."Z"

comment        ::= "#" {any_character_except_newline} newline

// Function

function           ::= function_header function_body

function_header    ::= "[" [id] function_modifier 

function_modifier ::= "!" "]" 
                 | "?" "]" function_condition
                 | "]" [function_args]


function_condition ::= "[" bool_expr "]"
function_args      ::= "["id {"," id}"]"

function_body      ::= "{" statements "}" function_return | "{" statements "}" | function_return 

function_return    ::= "(" (expr) ")"
// function_return    ::= "(" (expr | "this") ")"


function_call      ::= id call_args
call_args = "[" [expr { "," expr }] "]"