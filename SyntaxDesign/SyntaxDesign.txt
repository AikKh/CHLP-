<id> ::= (a-z | A-Z) (a-z | A-Z | 0-9)*
<digit> ::= (0-9)
<literal> ::= <digit> | 1-9 (<digit>)*
<float> ::= <literal>. | <literal>.<digit>(<digit>)* | .<digit>(<digit>)*

<value>		 ::= <float> | <literal> | <id> | <call>
<expression> ::= <term> (( '+' | '-' ) <term>)*
<term>       ::= <factor> (( '*' | '/' ) <factor>)*
<factor>     ::= ('-')? ('(' <expression> ')' | <value>)

<assign>			  ::= <id> '=' <expression>
<comparison>		  ::= <value> ('==' | '!=' | '>' | '<' | '>=' | '<=') <value> 

<boolean_expression>  ::= <boolean_expression> 'or' <boolean_expression1> | <boolean_expression1>
<boolean_expression1> ::= <boolean_expression1> 'and' <boolean_expression2> | <boolean_expression2>
<boolean_expression2> ::= 'not' <boolean_expression2> | <comparison>

<comparison> ('and' | 'or' <comparison>)*


<statements> ::= <statement>((';' | '\n')<statement>)*
<statement>  ::= <assign>  |
			     <call>    |
			     <comment> |
				 '[' (<id> | None)('!' | '?' | None) ']'							# Id and mode
				 ('[' (<id> (',' <id>)*) ']')?  									# Args
				 ('{' ((<statement> ('\n' | ';'))* '}')?							# Logic
				 ('('<expression>')' | 'this' | 'this'[(<value> (',' <value>)*)])?  # Return value

<call> ::= <id>[(<id> (',' <id>)*)]

<comment> ::= '#' (<any_character_except_newline>)* '\n'


